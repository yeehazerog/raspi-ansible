---
# file: /pip/tasks/main.yml

# Causes an error if we try and which something that doesn't exist so use this
# as a workaround.
- name: Check to see if pip is already installed.
  command: "{{ pip_executable }} --version"
  register: pip_version_output
  ignore_errors: yes
  changed_when: false # read-only task
#  check_mode: no
#  register: pip_is_installed

- name: Download get-pip.py
#  vars:
#    pip_version_url: "{{ (pip_get_pip_version == 'latest') | ternary('', pip_get_pip_version) }}"
#    required_vars:
#      - pip_get_pip_version
  get_url:
#    url: 'https://bootstrap.pypa.io/{{ pip_version_url }}/get-pip.py'
    url: 'https://bootstrap.pypa.io/latest/get-pip.py'
    dest: '{{ pip_download_dest }}/get-pip.py'
#  when: (pip_version_ouput is failed) or not pip_version_output.stdout is search(pip_version)
  when: (pip_version_ouput is failed)

- name: Install pip.
  command: "{{ ansible_python_interpreter if ansible_python_interpreter is defined else 'python' }} {{ pip_download_dest }}/get-pip.py pip=={{ pip_version}} {{ ' --proxy=' + pip_proxy if pip_proxy != '' else '' }}"
  become: yes
  when: "(pip_version_output is failed) or not pip_version_output.stdout is search('pip ' + pip_version)"
  args:
    chdir: /tmp

- name: Delete get-pip.py.
  file: state=absent path={{ pip_download_dest }}/get-pip.py
  when: pip_is_installed.rc != 0

# $ pip --version
#- name: Check to see if pip is installed at the correct version.
#  shell: "{{ pip }} --version | awk '{print $2}'"
#  register: pip_installed_version
#  changed_when: false
#  check_mode: no
#  when: pip_version or (pip_version | lower) != "latest"
#
#- name: Install required version of pip.
#  command: "{{ pip }} install pip=={{ pip_version }}"
#  become: yes
#  when: pip_version and pip_installed_version.stdout != pip_version and (pip_version | lower) != "latest"
#
#- name: Upgrade to latest version of pip.
#  command: "{{ pip }} {{ '--proxy=' + pip_proxy + ' ' if pip_proxy != '' else '' }}install -U pip"
#  register: pip_latest_output
#  become: yes
#  changed_when: pip_latest_output.stdout.find('Requirement already up-to-date') == -1
#  when: not pip_version or (pip_version | lower) == "latest"
